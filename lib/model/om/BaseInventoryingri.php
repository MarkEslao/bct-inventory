<?php

/**
 * Base class that represents a row from the 'inventoryingri' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 11/26/20 14:41:41
 *
 * @package    lib.model.om
 */
abstract class BaseInventoryingri extends BaseObject  implements Persistent {


  const PEER = 'InventoryingriPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        InventoryingriPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the barcode field.
	 * @var        string
	 */
	protected $barcode;

	/**
	 * The value for the reorder field.
	 * @var        string
	 */
	protected $reorder;

	/**
	 * The value for the warehouse field.
	 * @var        string
	 */
	protected $warehouse;

	/**
	 * The value for the qty field.
	 * @var        string
	 */
	protected $qty;

	/**
	 * The value for the vatin field.
	 * @var        string
	 */
	protected $vatin;

	/**
	 * The value for the vatex field.
	 * @var        string
	 */
	protected $vatex;

	/**
	 * The value for the selprice field.
	 * @var        string
	 */
	protected $selprice;

	/**
	 * The value for the vatin1 field.
	 * @var        string
	 */
	protected $vatin1;

	/**
	 * The value for the vatex1 field.
	 * @var        string
	 */
	protected $vatex1;

	/**
	 * The value for the wolprice field.
	 * @var        string
	 */
	protected $wolprice;

	/**
	 * The value for the wolqty field.
	 * @var        string
	 */
	protected $wolqty;

	/**
	 * The value for the price field.
	 * @var        string
	 */
	protected $price;

	/**
	 * The value for the uom field.
	 * @var        string
	 */
	protected $uom;

	/**
	 * The value for the pouom field.
	 * @var        string
	 */
	protected $pouom;

	/**
	 * The value for the con1 field.
	 * @var        string
	 */
	protected $con1;

	/**
	 * The value for the con2 field.
	 * @var        string
	 */
	protected $con2;

	/**
	 * The value for the category field.
	 * @var        string
	 */
	protected $category;

	/**
	 * The value for the type field.
	 * @var        string
	 */
	protected $type;

	/**
	 * The value for the file field.
	 * @var        string
	 */
	protected $file;

	/**
	 * The value for the senior field.
	 * @var        boolean
	 */
	protected $senior;

	/**
	 * The value for the nonstock field.
	 * @var        boolean
	 */
	protected $nonstock;

	/**
	 * The value for the active field.
	 * @var        string
	 */
	protected $active;

	/**
	 * The value for the addons field.
	 * @var        string
	 */
	protected $addons;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * @var        array Ingredients[] Collection to store aggregation of Ingredients objects.
	 */
	protected $collIngredientssRelatedByMain;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIngredientssRelatedByMain.
	 */
	private $lastIngredientsRelatedByMainCriteria = null;

	/**
	 * @var        array Ingredients[] Collection to store aggregation of Ingredients objects.
	 */
	protected $collIngredientssRelatedByItems;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIngredientssRelatedByItems.
	 */
	private $lastIngredientsRelatedByItemsCriteria = null;

	/**
	 * @var        array Addons[] Collection to store aggregation of Addons objects.
	 */
	protected $collAddonssRelatedByMain;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAddonssRelatedByMain.
	 */
	private $lastAddonsRelatedByMainCriteria = null;

	/**
	 * @var        array Addons[] Collection to store aggregation of Addons objects.
	 */
	protected $collAddonssRelatedByItems;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAddonssRelatedByItems.
	 */
	private $lastAddonsRelatedByItemsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseInventoryingri object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [barcode] column value.
	 * 
	 * @return     string
	 */
	public function getBarcode()
	{
		return $this->barcode;
	}

	/**
	 * Get the [reorder] column value.
	 * 
	 * @return     string
	 */
	public function getReorder()
	{
		return $this->reorder;
	}

	/**
	 * Get the [warehouse] column value.
	 * 
	 * @return     string
	 */
	public function getWarehouse()
	{
		return $this->warehouse;
	}

	/**
	 * Get the [qty] column value.
	 * 
	 * @return     string
	 */
	public function getQty()
	{
		return $this->qty;
	}

	/**
	 * Get the [vatin] column value.
	 * 
	 * @return     string
	 */
	public function getVatin()
	{
		return $this->vatin;
	}

	/**
	 * Get the [vatex] column value.
	 * 
	 * @return     string
	 */
	public function getVatex()
	{
		return $this->vatex;
	}

	/**
	 * Get the [selprice] column value.
	 * 
	 * @return     string
	 */
	public function getSelprice()
	{
		return $this->selprice;
	}

	/**
	 * Get the [vatin1] column value.
	 * 
	 * @return     string
	 */
	public function getVatin1()
	{
		return $this->vatin1;
	}

	/**
	 * Get the [vatex1] column value.
	 * 
	 * @return     string
	 */
	public function getVatex1()
	{
		return $this->vatex1;
	}

	/**
	 * Get the [wolprice] column value.
	 * 
	 * @return     string
	 */
	public function getWolprice()
	{
		return $this->wolprice;
	}

	/**
	 * Get the [wolqty] column value.
	 * 
	 * @return     string
	 */
	public function getWolqty()
	{
		return $this->wolqty;
	}

	/**
	 * Get the [price] column value.
	 * 
	 * @return     string
	 */
	public function getPrice()
	{
		return $this->price;
	}

	/**
	 * Get the [uom] column value.
	 * 
	 * @return     string
	 */
	public function getUom()
	{
		return $this->uom;
	}

	/**
	 * Get the [pouom] column value.
	 * 
	 * @return     string
	 */
	public function getPouom()
	{
		return $this->pouom;
	}

	/**
	 * Get the [con1] column value.
	 * 
	 * @return     string
	 */
	public function getCon1()
	{
		return $this->con1;
	}

	/**
	 * Get the [con2] column value.
	 * 
	 * @return     string
	 */
	public function getCon2()
	{
		return $this->con2;
	}

	/**
	 * Get the [category] column value.
	 * 
	 * @return     string
	 */
	public function getCategory()
	{
		return $this->category;
	}

	/**
	 * Get the [type] column value.
	 * 
	 * @return     string
	 */
	public function getType()
	{
		return $this->type;
	}

	/**
	 * Get the [file] column value.
	 * 
	 * @return     string
	 */
	public function getFile()
	{
		return $this->file;
	}

	/**
	 * Get the [senior] column value.
	 * 
	 * @return     boolean
	 */
	public function getSenior()
	{
		return $this->senior;
	}

	/**
	 * Get the [nonstock] column value.
	 * 
	 * @return     boolean
	 */
	public function getNonstock()
	{
		return $this->nonstock;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     string
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [addons] column value.
	 * 
	 * @return     string
	 */
	public function getAddons()
	{
		return $this->addons;
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = InventoryingriPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = InventoryingriPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [barcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setBarcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->barcode !== $v) {
			$this->barcode = $v;
			$this->modifiedColumns[] = InventoryingriPeer::BARCODE;
		}

		return $this;
	} // setBarcode()

	/**
	 * Set the value of [reorder] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setReorder($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reorder !== $v) {
			$this->reorder = $v;
			$this->modifiedColumns[] = InventoryingriPeer::REORDER;
		}

		return $this;
	} // setReorder()

	/**
	 * Set the value of [warehouse] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setWarehouse($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->warehouse !== $v) {
			$this->warehouse = $v;
			$this->modifiedColumns[] = InventoryingriPeer::WAREHOUSE;
		}

		return $this;
	} // setWarehouse()

	/**
	 * Set the value of [qty] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setQty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->qty !== $v) {
			$this->qty = $v;
			$this->modifiedColumns[] = InventoryingriPeer::QTY;
		}

		return $this;
	} // setQty()

	/**
	 * Set the value of [vatin] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setVatin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vatin !== $v) {
			$this->vatin = $v;
			$this->modifiedColumns[] = InventoryingriPeer::VATIN;
		}

		return $this;
	} // setVatin()

	/**
	 * Set the value of [vatex] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setVatex($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vatex !== $v) {
			$this->vatex = $v;
			$this->modifiedColumns[] = InventoryingriPeer::VATEX;
		}

		return $this;
	} // setVatex()

	/**
	 * Set the value of [selprice] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setSelprice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->selprice !== $v) {
			$this->selprice = $v;
			$this->modifiedColumns[] = InventoryingriPeer::SELPRICE;
		}

		return $this;
	} // setSelprice()

	/**
	 * Set the value of [vatin1] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setVatin1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vatin1 !== $v) {
			$this->vatin1 = $v;
			$this->modifiedColumns[] = InventoryingriPeer::VATIN1;
		}

		return $this;
	} // setVatin1()

	/**
	 * Set the value of [vatex1] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setVatex1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vatex1 !== $v) {
			$this->vatex1 = $v;
			$this->modifiedColumns[] = InventoryingriPeer::VATEX1;
		}

		return $this;
	} // setVatex1()

	/**
	 * Set the value of [wolprice] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setWolprice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->wolprice !== $v) {
			$this->wolprice = $v;
			$this->modifiedColumns[] = InventoryingriPeer::WOLPRICE;
		}

		return $this;
	} // setWolprice()

	/**
	 * Set the value of [wolqty] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setWolqty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->wolqty !== $v) {
			$this->wolqty = $v;
			$this->modifiedColumns[] = InventoryingriPeer::WOLQTY;
		}

		return $this;
	} // setWolqty()

	/**
	 * Set the value of [price] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setPrice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price !== $v) {
			$this->price = $v;
			$this->modifiedColumns[] = InventoryingriPeer::PRICE;
		}

		return $this;
	} // setPrice()

	/**
	 * Set the value of [uom] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setUom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->uom !== $v) {
			$this->uom = $v;
			$this->modifiedColumns[] = InventoryingriPeer::UOM;
		}

		return $this;
	} // setUom()

	/**
	 * Set the value of [pouom] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setPouom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pouom !== $v) {
			$this->pouom = $v;
			$this->modifiedColumns[] = InventoryingriPeer::POUOM;
		}

		return $this;
	} // setPouom()

	/**
	 * Set the value of [con1] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setCon1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->con1 !== $v) {
			$this->con1 = $v;
			$this->modifiedColumns[] = InventoryingriPeer::CON1;
		}

		return $this;
	} // setCon1()

	/**
	 * Set the value of [con2] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setCon2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->con2 !== $v) {
			$this->con2 = $v;
			$this->modifiedColumns[] = InventoryingriPeer::CON2;
		}

		return $this;
	} // setCon2()

	/**
	 * Set the value of [category] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setCategory($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->category !== $v) {
			$this->category = $v;
			$this->modifiedColumns[] = InventoryingriPeer::CATEGORY;
		}

		return $this;
	} // setCategory()

	/**
	 * Set the value of [type] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->type !== $v) {
			$this->type = $v;
			$this->modifiedColumns[] = InventoryingriPeer::TYPE;
		}

		return $this;
	} // setType()

	/**
	 * Set the value of [file] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setFile($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->file !== $v) {
			$this->file = $v;
			$this->modifiedColumns[] = InventoryingriPeer::FILE;
		}

		return $this;
	} // setFile()

	/**
	 * Set the value of [senior] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setSenior($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->senior !== $v) {
			$this->senior = $v;
			$this->modifiedColumns[] = InventoryingriPeer::SENIOR;
		}

		return $this;
	} // setSenior()

	/**
	 * Set the value of [nonstock] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setNonstock($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->nonstock !== $v) {
			$this->nonstock = $v;
			$this->modifiedColumns[] = InventoryingriPeer::NONSTOCK;
		}

		return $this;
	} // setNonstock()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->active !== $v) {
			$this->active = $v;
			$this->modifiedColumns[] = InventoryingriPeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Set the value of [addons] column.
	 * 
	 * @param      string $v new value
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setAddons($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->addons !== $v) {
			$this->addons = $v;
			$this->modifiedColumns[] = InventoryingriPeer::ADDONS;
		}

		return $this;
	} // setAddons()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = InventoryingriPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Inventoryingri The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = InventoryingriPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->barcode = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->reorder = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->warehouse = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->qty = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->vatin = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->vatex = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->selprice = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->vatin1 = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->vatex1 = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->wolprice = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->wolqty = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->price = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->uom = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->pouom = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->con1 = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->con2 = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->category = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->type = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->file = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->senior = ($row[$startcol + 21] !== null) ? (boolean) $row[$startcol + 21] : null;
			$this->nonstock = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->active = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->addons = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->updated_at = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->created_at = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = InventoryingriPeer::NUM_COLUMNS - InventoryingriPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Inventoryingri object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(InventoryingriPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = InventoryingriPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collIngredientssRelatedByMain = null;
			$this->lastIngredientsRelatedByMainCriteria = null;

			$this->collIngredientssRelatedByItems = null;
			$this->lastIngredientsRelatedByItemsCriteria = null;

			$this->collAddonssRelatedByMain = null;
			$this->lastAddonsRelatedByMainCriteria = null;

			$this->collAddonssRelatedByItems = null;
			$this->lastAddonsRelatedByItemsCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseInventoryingri:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(InventoryingriPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			InventoryingriPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseInventoryingri:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseInventoryingri:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isModified() && !$this->isColumnModified(InventoryingriPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

    if ($this->isNew() && !$this->isColumnModified(InventoryingriPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(InventoryingriPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseInventoryingri:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			InventoryingriPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = InventoryingriPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = InventoryingriPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += InventoryingriPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collIngredientssRelatedByMain !== null) {
				foreach ($this->collIngredientssRelatedByMain as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIngredientssRelatedByItems !== null) {
				foreach ($this->collIngredientssRelatedByItems as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAddonssRelatedByMain !== null) {
				foreach ($this->collAddonssRelatedByMain as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAddonssRelatedByItems !== null) {
				foreach ($this->collAddonssRelatedByItems as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = InventoryingriPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collIngredientssRelatedByMain !== null) {
					foreach ($this->collIngredientssRelatedByMain as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIngredientssRelatedByItems !== null) {
					foreach ($this->collIngredientssRelatedByItems as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAddonssRelatedByMain !== null) {
					foreach ($this->collAddonssRelatedByMain as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAddonssRelatedByItems !== null) {
					foreach ($this->collAddonssRelatedByItems as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = InventoryingriPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getBarcode();
				break;
			case 3:
				return $this->getReorder();
				break;
			case 4:
				return $this->getWarehouse();
				break;
			case 5:
				return $this->getQty();
				break;
			case 6:
				return $this->getVatin();
				break;
			case 7:
				return $this->getVatex();
				break;
			case 8:
				return $this->getSelprice();
				break;
			case 9:
				return $this->getVatin1();
				break;
			case 10:
				return $this->getVatex1();
				break;
			case 11:
				return $this->getWolprice();
				break;
			case 12:
				return $this->getWolqty();
				break;
			case 13:
				return $this->getPrice();
				break;
			case 14:
				return $this->getUom();
				break;
			case 15:
				return $this->getPouom();
				break;
			case 16:
				return $this->getCon1();
				break;
			case 17:
				return $this->getCon2();
				break;
			case 18:
				return $this->getCategory();
				break;
			case 19:
				return $this->getType();
				break;
			case 20:
				return $this->getFile();
				break;
			case 21:
				return $this->getSenior();
				break;
			case 22:
				return $this->getNonstock();
				break;
			case 23:
				return $this->getActive();
				break;
			case 24:
				return $this->getAddons();
				break;
			case 25:
				return $this->getUpdatedAt();
				break;
			case 26:
				return $this->getCreatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = InventoryingriPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getBarcode(),
			$keys[3] => $this->getReorder(),
			$keys[4] => $this->getWarehouse(),
			$keys[5] => $this->getQty(),
			$keys[6] => $this->getVatin(),
			$keys[7] => $this->getVatex(),
			$keys[8] => $this->getSelprice(),
			$keys[9] => $this->getVatin1(),
			$keys[10] => $this->getVatex1(),
			$keys[11] => $this->getWolprice(),
			$keys[12] => $this->getWolqty(),
			$keys[13] => $this->getPrice(),
			$keys[14] => $this->getUom(),
			$keys[15] => $this->getPouom(),
			$keys[16] => $this->getCon1(),
			$keys[17] => $this->getCon2(),
			$keys[18] => $this->getCategory(),
			$keys[19] => $this->getType(),
			$keys[20] => $this->getFile(),
			$keys[21] => $this->getSenior(),
			$keys[22] => $this->getNonstock(),
			$keys[23] => $this->getActive(),
			$keys[24] => $this->getAddons(),
			$keys[25] => $this->getUpdatedAt(),
			$keys[26] => $this->getCreatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = InventoryingriPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setBarcode($value);
				break;
			case 3:
				$this->setReorder($value);
				break;
			case 4:
				$this->setWarehouse($value);
				break;
			case 5:
				$this->setQty($value);
				break;
			case 6:
				$this->setVatin($value);
				break;
			case 7:
				$this->setVatex($value);
				break;
			case 8:
				$this->setSelprice($value);
				break;
			case 9:
				$this->setVatin1($value);
				break;
			case 10:
				$this->setVatex1($value);
				break;
			case 11:
				$this->setWolprice($value);
				break;
			case 12:
				$this->setWolqty($value);
				break;
			case 13:
				$this->setPrice($value);
				break;
			case 14:
				$this->setUom($value);
				break;
			case 15:
				$this->setPouom($value);
				break;
			case 16:
				$this->setCon1($value);
				break;
			case 17:
				$this->setCon2($value);
				break;
			case 18:
				$this->setCategory($value);
				break;
			case 19:
				$this->setType($value);
				break;
			case 20:
				$this->setFile($value);
				break;
			case 21:
				$this->setSenior($value);
				break;
			case 22:
				$this->setNonstock($value);
				break;
			case 23:
				$this->setActive($value);
				break;
			case 24:
				$this->setAddons($value);
				break;
			case 25:
				$this->setUpdatedAt($value);
				break;
			case 26:
				$this->setCreatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = InventoryingriPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setBarcode($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setReorder($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setWarehouse($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setQty($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setVatin($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setVatex($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setSelprice($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setVatin1($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setVatex1($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setWolprice($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setWolqty($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPrice($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUom($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPouom($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCon1($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCon2($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCategory($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setType($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setFile($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSenior($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setNonstock($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setActive($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setAddons($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setUpdatedAt($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCreatedAt($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);

		if ($this->isColumnModified(InventoryingriPeer::ID)) $criteria->add(InventoryingriPeer::ID, $this->id);
		if ($this->isColumnModified(InventoryingriPeer::NAME)) $criteria->add(InventoryingriPeer::NAME, $this->name);
		if ($this->isColumnModified(InventoryingriPeer::BARCODE)) $criteria->add(InventoryingriPeer::BARCODE, $this->barcode);
		if ($this->isColumnModified(InventoryingriPeer::REORDER)) $criteria->add(InventoryingriPeer::REORDER, $this->reorder);
		if ($this->isColumnModified(InventoryingriPeer::WAREHOUSE)) $criteria->add(InventoryingriPeer::WAREHOUSE, $this->warehouse);
		if ($this->isColumnModified(InventoryingriPeer::QTY)) $criteria->add(InventoryingriPeer::QTY, $this->qty);
		if ($this->isColumnModified(InventoryingriPeer::VATIN)) $criteria->add(InventoryingriPeer::VATIN, $this->vatin);
		if ($this->isColumnModified(InventoryingriPeer::VATEX)) $criteria->add(InventoryingriPeer::VATEX, $this->vatex);
		if ($this->isColumnModified(InventoryingriPeer::SELPRICE)) $criteria->add(InventoryingriPeer::SELPRICE, $this->selprice);
		if ($this->isColumnModified(InventoryingriPeer::VATIN1)) $criteria->add(InventoryingriPeer::VATIN1, $this->vatin1);
		if ($this->isColumnModified(InventoryingriPeer::VATEX1)) $criteria->add(InventoryingriPeer::VATEX1, $this->vatex1);
		if ($this->isColumnModified(InventoryingriPeer::WOLPRICE)) $criteria->add(InventoryingriPeer::WOLPRICE, $this->wolprice);
		if ($this->isColumnModified(InventoryingriPeer::WOLQTY)) $criteria->add(InventoryingriPeer::WOLQTY, $this->wolqty);
		if ($this->isColumnModified(InventoryingriPeer::PRICE)) $criteria->add(InventoryingriPeer::PRICE, $this->price);
		if ($this->isColumnModified(InventoryingriPeer::UOM)) $criteria->add(InventoryingriPeer::UOM, $this->uom);
		if ($this->isColumnModified(InventoryingriPeer::POUOM)) $criteria->add(InventoryingriPeer::POUOM, $this->pouom);
		if ($this->isColumnModified(InventoryingriPeer::CON1)) $criteria->add(InventoryingriPeer::CON1, $this->con1);
		if ($this->isColumnModified(InventoryingriPeer::CON2)) $criteria->add(InventoryingriPeer::CON2, $this->con2);
		if ($this->isColumnModified(InventoryingriPeer::CATEGORY)) $criteria->add(InventoryingriPeer::CATEGORY, $this->category);
		if ($this->isColumnModified(InventoryingriPeer::TYPE)) $criteria->add(InventoryingriPeer::TYPE, $this->type);
		if ($this->isColumnModified(InventoryingriPeer::FILE)) $criteria->add(InventoryingriPeer::FILE, $this->file);
		if ($this->isColumnModified(InventoryingriPeer::SENIOR)) $criteria->add(InventoryingriPeer::SENIOR, $this->senior);
		if ($this->isColumnModified(InventoryingriPeer::NONSTOCK)) $criteria->add(InventoryingriPeer::NONSTOCK, $this->nonstock);
		if ($this->isColumnModified(InventoryingriPeer::ACTIVE)) $criteria->add(InventoryingriPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(InventoryingriPeer::ADDONS)) $criteria->add(InventoryingriPeer::ADDONS, $this->addons);
		if ($this->isColumnModified(InventoryingriPeer::UPDATED_AT)) $criteria->add(InventoryingriPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(InventoryingriPeer::CREATED_AT)) $criteria->add(InventoryingriPeer::CREATED_AT, $this->created_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);

		$criteria->add(InventoryingriPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Inventoryingri (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setBarcode($this->barcode);

		$copyObj->setReorder($this->reorder);

		$copyObj->setWarehouse($this->warehouse);

		$copyObj->setQty($this->qty);

		$copyObj->setVatin($this->vatin);

		$copyObj->setVatex($this->vatex);

		$copyObj->setSelprice($this->selprice);

		$copyObj->setVatin1($this->vatin1);

		$copyObj->setVatex1($this->vatex1);

		$copyObj->setWolprice($this->wolprice);

		$copyObj->setWolqty($this->wolqty);

		$copyObj->setPrice($this->price);

		$copyObj->setUom($this->uom);

		$copyObj->setPouom($this->pouom);

		$copyObj->setCon1($this->con1);

		$copyObj->setCon2($this->con2);

		$copyObj->setCategory($this->category);

		$copyObj->setType($this->type);

		$copyObj->setFile($this->file);

		$copyObj->setSenior($this->senior);

		$copyObj->setNonstock($this->nonstock);

		$copyObj->setActive($this->active);

		$copyObj->setAddons($this->addons);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCreatedAt($this->created_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getIngredientssRelatedByMain() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIngredientsRelatedByMain($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIngredientssRelatedByItems() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIngredientsRelatedByItems($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAddonssRelatedByMain() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAddonsRelatedByMain($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAddonssRelatedByItems() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAddonsRelatedByItems($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Inventoryingri Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     InventoryingriPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new InventoryingriPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collIngredientssRelatedByMain collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIngredientssRelatedByMain()
	 */
	public function clearIngredientssRelatedByMain()
	{
		$this->collIngredientssRelatedByMain = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIngredientssRelatedByMain collection (array).
	 *
	 * By default this just sets the collIngredientssRelatedByMain collection to an empty array (like clearcollIngredientssRelatedByMain());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIngredientssRelatedByMain()
	{
		$this->collIngredientssRelatedByMain = array();
	}

	/**
	 * Gets an array of Ingredients objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Inventoryingri has previously been saved, it will retrieve
	 * related IngredientssRelatedByMain from storage. If this Inventoryingri is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Ingredients[]
	 * @throws     PropelException
	 */
	public function getIngredientssRelatedByMain($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIngredientssRelatedByMain === null) {
			if ($this->isNew()) {
			   $this->collIngredientssRelatedByMain = array();
			} else {

				$criteria->add(IngredientsPeer::MAIN, $this->id);

				IngredientsPeer::addSelectColumns($criteria);
				$this->collIngredientssRelatedByMain = IngredientsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IngredientsPeer::MAIN, $this->id);

				IngredientsPeer::addSelectColumns($criteria);
				if (!isset($this->lastIngredientsRelatedByMainCriteria) || !$this->lastIngredientsRelatedByMainCriteria->equals($criteria)) {
					$this->collIngredientssRelatedByMain = IngredientsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIngredientsRelatedByMainCriteria = $criteria;
		return $this->collIngredientssRelatedByMain;
	}

	/**
	 * Returns the number of related Ingredients objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Ingredients objects.
	 * @throws     PropelException
	 */
	public function countIngredientssRelatedByMain(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIngredientssRelatedByMain === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IngredientsPeer::MAIN, $this->id);

				$count = IngredientsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IngredientsPeer::MAIN, $this->id);

				if (!isset($this->lastIngredientsRelatedByMainCriteria) || !$this->lastIngredientsRelatedByMainCriteria->equals($criteria)) {
					$count = IngredientsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collIngredientssRelatedByMain);
				}
			} else {
				$count = count($this->collIngredientssRelatedByMain);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Ingredients object to this object
	 * through the Ingredients foreign key attribute.
	 *
	 * @param      Ingredients $l Ingredients
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIngredientsRelatedByMain(Ingredients $l)
	{
		if ($this->collIngredientssRelatedByMain === null) {
			$this->initIngredientssRelatedByMain();
		}
		if (!in_array($l, $this->collIngredientssRelatedByMain, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIngredientssRelatedByMain, $l);
			$l->setInventoryingriRelatedByMain($this);
		}
	}

	/**
	 * Clears out the collIngredientssRelatedByItems collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIngredientssRelatedByItems()
	 */
	public function clearIngredientssRelatedByItems()
	{
		$this->collIngredientssRelatedByItems = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIngredientssRelatedByItems collection (array).
	 *
	 * By default this just sets the collIngredientssRelatedByItems collection to an empty array (like clearcollIngredientssRelatedByItems());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIngredientssRelatedByItems()
	{
		$this->collIngredientssRelatedByItems = array();
	}

	/**
	 * Gets an array of Ingredients objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Inventoryingri has previously been saved, it will retrieve
	 * related IngredientssRelatedByItems from storage. If this Inventoryingri is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Ingredients[]
	 * @throws     PropelException
	 */
	public function getIngredientssRelatedByItems($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIngredientssRelatedByItems === null) {
			if ($this->isNew()) {
			   $this->collIngredientssRelatedByItems = array();
			} else {

				$criteria->add(IngredientsPeer::ITEMS, $this->id);

				IngredientsPeer::addSelectColumns($criteria);
				$this->collIngredientssRelatedByItems = IngredientsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IngredientsPeer::ITEMS, $this->id);

				IngredientsPeer::addSelectColumns($criteria);
				if (!isset($this->lastIngredientsRelatedByItemsCriteria) || !$this->lastIngredientsRelatedByItemsCriteria->equals($criteria)) {
					$this->collIngredientssRelatedByItems = IngredientsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIngredientsRelatedByItemsCriteria = $criteria;
		return $this->collIngredientssRelatedByItems;
	}

	/**
	 * Returns the number of related Ingredients objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Ingredients objects.
	 * @throws     PropelException
	 */
	public function countIngredientssRelatedByItems(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIngredientssRelatedByItems === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IngredientsPeer::ITEMS, $this->id);

				$count = IngredientsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IngredientsPeer::ITEMS, $this->id);

				if (!isset($this->lastIngredientsRelatedByItemsCriteria) || !$this->lastIngredientsRelatedByItemsCriteria->equals($criteria)) {
					$count = IngredientsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collIngredientssRelatedByItems);
				}
			} else {
				$count = count($this->collIngredientssRelatedByItems);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Ingredients object to this object
	 * through the Ingredients foreign key attribute.
	 *
	 * @param      Ingredients $l Ingredients
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIngredientsRelatedByItems(Ingredients $l)
	{
		if ($this->collIngredientssRelatedByItems === null) {
			$this->initIngredientssRelatedByItems();
		}
		if (!in_array($l, $this->collIngredientssRelatedByItems, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIngredientssRelatedByItems, $l);
			$l->setInventoryingriRelatedByItems($this);
		}
	}

	/**
	 * Clears out the collAddonssRelatedByMain collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAddonssRelatedByMain()
	 */
	public function clearAddonssRelatedByMain()
	{
		$this->collAddonssRelatedByMain = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAddonssRelatedByMain collection (array).
	 *
	 * By default this just sets the collAddonssRelatedByMain collection to an empty array (like clearcollAddonssRelatedByMain());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAddonssRelatedByMain()
	{
		$this->collAddonssRelatedByMain = array();
	}

	/**
	 * Gets an array of Addons objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Inventoryingri has previously been saved, it will retrieve
	 * related AddonssRelatedByMain from storage. If this Inventoryingri is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Addons[]
	 * @throws     PropelException
	 */
	public function getAddonssRelatedByMain($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAddonssRelatedByMain === null) {
			if ($this->isNew()) {
			   $this->collAddonssRelatedByMain = array();
			} else {

				$criteria->add(AddonsPeer::MAIN, $this->id);

				AddonsPeer::addSelectColumns($criteria);
				$this->collAddonssRelatedByMain = AddonsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AddonsPeer::MAIN, $this->id);

				AddonsPeer::addSelectColumns($criteria);
				if (!isset($this->lastAddonsRelatedByMainCriteria) || !$this->lastAddonsRelatedByMainCriteria->equals($criteria)) {
					$this->collAddonssRelatedByMain = AddonsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAddonsRelatedByMainCriteria = $criteria;
		return $this->collAddonssRelatedByMain;
	}

	/**
	 * Returns the number of related Addons objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Addons objects.
	 * @throws     PropelException
	 */
	public function countAddonssRelatedByMain(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAddonssRelatedByMain === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AddonsPeer::MAIN, $this->id);

				$count = AddonsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AddonsPeer::MAIN, $this->id);

				if (!isset($this->lastAddonsRelatedByMainCriteria) || !$this->lastAddonsRelatedByMainCriteria->equals($criteria)) {
					$count = AddonsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAddonssRelatedByMain);
				}
			} else {
				$count = count($this->collAddonssRelatedByMain);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Addons object to this object
	 * through the Addons foreign key attribute.
	 *
	 * @param      Addons $l Addons
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAddonsRelatedByMain(Addons $l)
	{
		if ($this->collAddonssRelatedByMain === null) {
			$this->initAddonssRelatedByMain();
		}
		if (!in_array($l, $this->collAddonssRelatedByMain, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAddonssRelatedByMain, $l);
			$l->setInventoryingriRelatedByMain($this);
		}
	}

	/**
	 * Clears out the collAddonssRelatedByItems collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAddonssRelatedByItems()
	 */
	public function clearAddonssRelatedByItems()
	{
		$this->collAddonssRelatedByItems = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAddonssRelatedByItems collection (array).
	 *
	 * By default this just sets the collAddonssRelatedByItems collection to an empty array (like clearcollAddonssRelatedByItems());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAddonssRelatedByItems()
	{
		$this->collAddonssRelatedByItems = array();
	}

	/**
	 * Gets an array of Addons objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Inventoryingri has previously been saved, it will retrieve
	 * related AddonssRelatedByItems from storage. If this Inventoryingri is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Addons[]
	 * @throws     PropelException
	 */
	public function getAddonssRelatedByItems($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAddonssRelatedByItems === null) {
			if ($this->isNew()) {
			   $this->collAddonssRelatedByItems = array();
			} else {

				$criteria->add(AddonsPeer::ITEMS, $this->id);

				AddonsPeer::addSelectColumns($criteria);
				$this->collAddonssRelatedByItems = AddonsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AddonsPeer::ITEMS, $this->id);

				AddonsPeer::addSelectColumns($criteria);
				if (!isset($this->lastAddonsRelatedByItemsCriteria) || !$this->lastAddonsRelatedByItemsCriteria->equals($criteria)) {
					$this->collAddonssRelatedByItems = AddonsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAddonsRelatedByItemsCriteria = $criteria;
		return $this->collAddonssRelatedByItems;
	}

	/**
	 * Returns the number of related Addons objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Addons objects.
	 * @throws     PropelException
	 */
	public function countAddonssRelatedByItems(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(InventoryingriPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAddonssRelatedByItems === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AddonsPeer::ITEMS, $this->id);

				$count = AddonsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AddonsPeer::ITEMS, $this->id);

				if (!isset($this->lastAddonsRelatedByItemsCriteria) || !$this->lastAddonsRelatedByItemsCriteria->equals($criteria)) {
					$count = AddonsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAddonssRelatedByItems);
				}
			} else {
				$count = count($this->collAddonssRelatedByItems);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Addons object to this object
	 * through the Addons foreign key attribute.
	 *
	 * @param      Addons $l Addons
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAddonsRelatedByItems(Addons $l)
	{
		if ($this->collAddonssRelatedByItems === null) {
			$this->initAddonssRelatedByItems();
		}
		if (!in_array($l, $this->collAddonssRelatedByItems, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAddonssRelatedByItems, $l);
			$l->setInventoryingriRelatedByItems($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collIngredientssRelatedByMain) {
				foreach ((array) $this->collIngredientssRelatedByMain as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIngredientssRelatedByItems) {
				foreach ((array) $this->collIngredientssRelatedByItems as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAddonssRelatedByMain) {
				foreach ((array) $this->collAddonssRelatedByMain as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAddonssRelatedByItems) {
				foreach ((array) $this->collAddonssRelatedByItems as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collIngredientssRelatedByMain = null;
		$this->collIngredientssRelatedByItems = null;
		$this->collAddonssRelatedByMain = null;
		$this->collAddonssRelatedByItems = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseInventoryingri:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseInventoryingri::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseInventoryingri
